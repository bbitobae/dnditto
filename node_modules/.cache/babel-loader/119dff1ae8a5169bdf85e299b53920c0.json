{"ast":null,"code":"var _jsxFileName = \"/home/user/project/dnditto/src/Navbar/Navbar.tsx\",\n    _s2 = $RefreshSig$();\n\nimport { MDBBtn, MDBContainer, MDBNavbar } from \"mdb-react-ui-kit\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ActivityContext } from \"../Dnditto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NavbarContext = /*#__PURE__*/createContext({\n  attacking: false,\n  healing: false // inActionCallback: (): string => { return \"\" }\n\n});\nexport default function Navbar() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [attacking, setAttacking] = useState(false);\n  const [healing, setHealing] = useState(false);\n\n  const useActionContext = () => {\n    _s();\n\n    const context = useContext(ActivityContext);\n\n    if (!context) {\n      throw new Error(\"Activity context error\");\n    }\n\n    return context;\n  };\n\n  _s(useActionContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\n  const {\n    currentAction,\n    setActionCallback\n  } = useActionContext();\n  useEffect(() => {\n    console.log(`${attacking}\\t|-|-|\\t${healing}`);\n    setActionCallback(attacking, healing);\n  }, [attacking, healing]);\n\n  const toggleAction = (one, setOne, other, setOther) => {\n    if (other) {\n      setOther(!other);\n    }\n\n    setOne(!one);\n  };\n\n  return /*#__PURE__*/_jsxDEV(MDBNavbar, {\n    children: /*#__PURE__*/_jsxDEV(MDBContainer, {\n      tag: \"form\",\n      fluid: true,\n      className: \"justify-content-end\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(MDBBtn, {\n          outline: !attacking,\n          color: \"danger\",\n          className: \"me-2\",\n          type: \"button\",\n          onClick: () => toggleAction(attacking, setAttacking, healing, setHealing),\n          children: \"Attack\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MDBBtn, {\n          outline: !healing,\n          color: \"success\",\n          className: \"me-2\",\n          type: \"button\",\n          onClick: () => toggleAction(healing, setHealing, attacking, setAttacking),\n          children: \"Heal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(MDBBtn, {\n          outline: true,\n          color: \"info\",\n          className: \"me-2\",\n          type: \"button\",\n          children: \"Next Round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(Navbar, \"uKEqXo1Fd0MRL6lOX7ZWATQDY9Y=\", true);\n\n_c = Navbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["MDBBtn","MDBContainer","MDBNavbar","createContext","useContext","useEffect","useState","ActivityContext","NavbarContext","attacking","healing","Navbar","setAttacking","setHealing","useActionContext","context","Error","currentAction","setActionCallback","console","log","toggleAction","one","setOne","other","setOther"],"sources":["/home/user/project/dnditto/src/Navbar/Navbar.tsx"],"sourcesContent":["import {MDBBtn, MDBContainer, MDBNavbar} from \"mdb-react-ui-kit\";\nimport {createContext, useContext, useEffect, useMemo, useState} from \"react\";\nimport {EntityActivityContext} from \"../EntityGroup/EntityGroup\";\nimport {ActivityContext} from \"../Dnditto\";\n\nexport const NavbarContext = createContext({\n    attacking: false,\n    healing: false,\n    // inActionCallback: (): string => { return \"\" }\n})\n\nexport default function Navbar() {\n\n    const [attacking, setAttacking] = useState(false)\n    const [healing, setHealing] = useState(false)\n\n    const useActionContext = () => {\n        const context = useContext(ActivityContext)\n        if (!context) {\n            throw new Error(\n                \"Activity context error\"\n            );\n        }\n        return context\n    }\n\n    const { currentAction, setActionCallback } = useActionContext()\n\n    useEffect(() => {\n        console.log(`${attacking}\\t|-|-|\\t${healing}`)\n        setActionCallback(attacking, healing)\n    }, [attacking, healing])\n\n    const toggleAction = (\n        one: boolean,\n        setOne: (one: boolean) => void,\n        other: boolean,\n        setOther: (one: boolean) => void\n    ) => {\n        if (other) { setOther(!other) }\n        setOne(!one)\n    }\n\n    return (\n        <MDBNavbar>\n            <MDBContainer tag=\"form\" fluid className=\"justify-content-end\">\n                <div>\n                    <MDBBtn outline={!attacking} color=\"danger\" className=\"me-2\" type=\"button\" onClick={() => toggleAction(attacking, setAttacking, healing, setHealing)}>\n                        Attack\n                    </MDBBtn>\n                    <MDBBtn outline={!healing} color=\"success\" className=\"me-2\" type=\"button\" onClick={() => toggleAction(healing, setHealing, attacking, setAttacking)}>\n                        Heal\n                    </MDBBtn>\n                </div>\n                <div>\n                    <MDBBtn outline color=\"info\" className=\"me-2\" type=\"button\">\n                        Next Round\n                    </MDBBtn>\n                </div>\n            </MDBContainer>\n        </MDBNavbar>\n    )\n}\n"],"mappings":";;;AAAA,SAAQA,MAAR,EAAgBC,YAAhB,EAA8BC,SAA9B,QAA8C,kBAA9C;AACA,SAAQC,aAAR,EAAuBC,UAAvB,EAAmCC,SAAnC,EAAuDC,QAAvD,QAAsE,OAAtE;AAEA,SAAQC,eAAR,QAA8B,YAA9B;;AAEA,OAAO,MAAMC,aAAa,gBAAGL,aAAa,CAAC;EACvCM,SAAS,EAAE,KAD4B;EAEvCC,OAAO,EAAE,KAF8B,CAGvC;;AAHuC,CAAD,CAAnC;AAMP,eAAe,SAASC,MAAT,GAAkB;EAAA;;EAAA;;EAE7B,MAAM,CAACF,SAAD,EAAYG,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACI,OAAD,EAAUG,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;;EAEA,MAAMQ,gBAAgB,GAAG,MAAM;IAAA;;IAC3B,MAAMC,OAAO,GAAGX,UAAU,CAACG,eAAD,CAA1B;;IACA,IAAI,CAACQ,OAAL,EAAc;MACV,MAAM,IAAIC,KAAJ,CACF,wBADE,CAAN;IAGH;;IACD,OAAOD,OAAP;EACH,CARD;;EAL6B,GAKvBD,gBALuB;;EAe7B,MAAM;IAAEG,aAAF;IAAiBC;EAAjB,IAAuCJ,gBAAgB,EAA7D;EAEAT,SAAS,CAAC,MAAM;IACZc,OAAO,CAACC,GAAR,CAAa,GAAEX,SAAU,YAAWC,OAAQ,EAA5C;IACAQ,iBAAiB,CAACT,SAAD,EAAYC,OAAZ,CAAjB;EACH,CAHQ,EAGN,CAACD,SAAD,EAAYC,OAAZ,CAHM,CAAT;;EAKA,MAAMW,YAAY,GAAG,CACjBC,GADiB,EAEjBC,MAFiB,EAGjBC,KAHiB,EAIjBC,QAJiB,KAKhB;IACD,IAAID,KAAJ,EAAW;MAAEC,QAAQ,CAAC,CAACD,KAAF,CAAR;IAAkB;;IAC/BD,MAAM,CAAC,CAACD,GAAF,CAAN;EACH,CARD;;EAUA,oBACI,QAAC,SAAD;IAAA,uBACI,QAAC,YAAD;MAAc,GAAG,EAAC,MAAlB;MAAyB,KAAK,MAA9B;MAA+B,SAAS,EAAC,qBAAzC;MAAA,wBACI;QAAA,wBACI,QAAC,MAAD;UAAQ,OAAO,EAAE,CAACb,SAAlB;UAA6B,KAAK,EAAC,QAAnC;UAA4C,SAAS,EAAC,MAAtD;UAA6D,IAAI,EAAC,QAAlE;UAA2E,OAAO,EAAE,MAAMY,YAAY,CAACZ,SAAD,EAAYG,YAAZ,EAA0BF,OAA1B,EAAmCG,UAAnC,CAAtG;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAII,QAAC,MAAD;UAAQ,OAAO,EAAE,CAACH,OAAlB;UAA2B,KAAK,EAAC,SAAjC;UAA2C,SAAS,EAAC,MAArD;UAA4D,IAAI,EAAC,QAAjE;UAA0E,OAAO,EAAE,MAAMW,YAAY,CAACX,OAAD,EAAUG,UAAV,EAAsBJ,SAAtB,EAAiCG,YAAjC,CAArG;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAJJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eASI;QAAA,uBACI,QAAC,MAAD;UAAQ,OAAO,MAAf;UAAgB,KAAK,EAAC,MAAtB;UAA6B,SAAS,EAAC,MAAvC;UAA8C,IAAI,EAAC,QAAnD;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QATJ;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAmBH;;IAnDuBD,M;;KAAAA,M"},"metadata":{},"sourceType":"module"}