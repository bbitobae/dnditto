{"ast":null,"code":"var _jsxFileName = \"/home/user/project/dnditto/src/EntityGroup/EntityGroup.tsx\",\n    _s = $RefreshSig$();\n\nimport Entity from \"../Entity/Entity\";\nimport React, { createContext, useCallback, useMemo, useState } from 'react';\nimport { MDBContainer } from 'mdb-react-ui-kit';\nimport EntityGroupHeader from \"../EntityGroupHeader/EntityGroupHeader\";\nimport './EntityGroup.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EntityContext = /*#__PURE__*/createContext({\n  selectionToggle: id => {},\n  selectedEntity: \"\",\n  currentAction: \"\"\n});\nexport const EntityActivityContext = /*#__PURE__*/createContext({\n  setActionCallback: (attacking, healing) => {\n    console.log(`${attacking}\\t======\\t${healing}`);\n  }\n});\nexport default function EntityGroup(props) {\n  _s();\n\n  const [selectedEntity, setSelectedEntity] = useState(\"\");\n  const [currentAction, setCurrentAction] = useState(\"selected\");\n  const selectionToggle = useCallback(entityId => {\n    if (entityId !== selectedEntity) {\n      setSelectedEntity(entityId);\n      return;\n    }\n\n    setSelectedEntity(\"\");\n    return;\n  }, [selectedEntity, setSelectedEntity]);\n  const setActionCallback = useCallback((attacking, healing) => {\n    console.log(`${attacking} +++++ ${healing}`);\n\n    if (attacking) {\n      setCurrentAction(\"attack\");\n    } else if (healing) {\n      setCurrentAction(\"heal\");\n    } else {\n      setCurrentAction(\"selected\");\n    }\n  }, [setCurrentAction]);\n  const entityContext = useMemo(() => ({\n    selectionToggle,\n    selectedEntity,\n    currentAction\n  }), [selectionToggle, selectedEntity, currentAction]);\n  const activityContext = useMemo(() => ({\n    setActionCallback: setActionCallback\n  }), [setActionCallback]);\n\n  const renderEntity = c => {\n    const entityProps = {\n      id: c.id,\n      name: c.name,\n      initiative: c.initiative,\n      health: c.health,\n      ac: c.ac\n    };\n    return /*#__PURE__*/_jsxDEV(Entity, { ...entityProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  };\n\n  const [entities, setEntities] = useState(props.entities.map(c => renderEntity(c)));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex justify-content-center entity-group-root\",\n    children: /*#__PURE__*/_jsxDEV(MDBContainer, {\n      className: \"entity-group\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"entity-group-container\",\n        children: [/*#__PURE__*/_jsxDEV(EntityGroupHeader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"entity-group-list\",\n          children: /*#__PURE__*/_jsxDEV(EntityContext.Provider, {\n            value: entityContext,\n            children: /*#__PURE__*/_jsxDEV(EntityActivityContext.Provider, {\n              value: activityContext,\n              children: entities\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EntityGroup, \"4gwYPRLhwMWsgqAO8DeXtJncSbU=\");\n\n_c = EntityGroup;\n\nvar _c;\n\n$RefreshReg$(_c, \"EntityGroup\");","map":{"version":3,"names":["Entity","React","createContext","useCallback","useMemo","useState","MDBContainer","EntityGroupHeader","EntityContext","selectionToggle","id","selectedEntity","currentAction","EntityActivityContext","setActionCallback","attacking","healing","console","log","EntityGroup","props","setSelectedEntity","setCurrentAction","entityId","entityContext","activityContext","renderEntity","c","entityProps","name","initiative","health","ac","entities","setEntities","map"],"sources":["/home/user/project/dnditto/src/EntityGroup/EntityGroup.tsx"],"sourcesContent":["import Entity from \"../Entity/Entity\";\nimport React, {Component, createContext, ReactElement, useCallback, useContext, useMemo, useRef, useState} from 'react';\nimport { MDBContainer } from 'mdb-react-ui-kit';\nimport Character from '../Models/Character';\nimport EntityGroupHeader from \"../EntityGroupHeader/EntityGroupHeader\";\nimport './EntityGroup.scss';\nimport {NavbarContext} from \"../Navbar/Navbar\";\n\ninterface IEntityGroupProps {\n    entities: Array<Character>\n}\n\nexport const EntityContext = createContext({\n    selectionToggle: (id: string) => {},\n    selectedEntity: \"\",\n    currentAction: \"\"\n});\nexport const EntityActivityContext = createContext({\n    setActionCallback: (attacking: boolean, healing: boolean) => { console.log(`${attacking}\\t======\\t${healing}`)}\n})\n\nexport default function EntityGroup(props: IEntityGroupProps) {\n\n    const [selectedEntity, setSelectedEntity] = useState(\"\")\n    const [currentAction, setCurrentAction] = useState(\"selected\")\n\n    const selectionToggle = useCallback(\n        (entityId: string) => {\n            if (entityId !== selectedEntity) {\n                setSelectedEntity(entityId)\n                return\n            }\n            setSelectedEntity(\"\")\n            return\n        }, [selectedEntity, setSelectedEntity]\n    )\n    const setActionCallback = useCallback((attacking: boolean, healing: boolean): void => {\n        console.log(`${attacking} +++++ ${healing}`)\n        if (attacking) {\n            setCurrentAction(\"attack\")\n        } else if (healing) {\n            setCurrentAction(\"heal\")\n        } else {\n            setCurrentAction(\"selected\")\n        }\n    }, [setCurrentAction])\n\n    const entityContext = useMemo(\n        () => ({\n            selectionToggle,\n            selectedEntity,\n            currentAction\n        }),\n        [selectionToggle, selectedEntity, currentAction]\n    )\n    const activityContext = useMemo(\n        () => ({\n            setActionCallback: setActionCallback\n        }), [ setActionCallback ]\n    )\n\n\n    const renderEntity = (c: Character) => {\n\n        const entityProps = {\n            id: c.id,\n            name: c.name,\n            initiative: c.initiative,\n            health: c.health,\n            ac: c.ac\n        }\n\n        return (\n            <Entity {...entityProps} />\n        )\n    }\n\n    const [entities, setEntities] = useState(props.entities.map((c: Character) => renderEntity(c)))\n\n    return(\n        <div className=\"d-flex justify-content-center entity-group-root\">\n            <MDBContainer className=\"entity-group\">\n                <div className=\"entity-group-container\">\n                    <EntityGroupHeader />\n                    <div className=\"entity-group-list\">\n                        <EntityContext.Provider value={entityContext}>\n                            <EntityActivityContext.Provider value={activityContext}>\n                                {entities}\n                            </EntityActivityContext.Provider>\n                        </EntityContext.Provider>\n                    </div>\n                </div>\n            </MDBContainer>\n        </div>\n    )\n}\n"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,kBAAnB;AACA,OAAOC,KAAP,IAA0BC,aAA1B,EAAuDC,WAAvD,EAAgFC,OAAhF,EAAiGC,QAAjG,QAAgH,OAAhH;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,OAAOC,iBAAP,MAA8B,wCAA9B;AACA,OAAO,oBAAP;;AAOA,OAAO,MAAMC,aAAa,gBAAGN,aAAa,CAAC;EACvCO,eAAe,EAAGC,EAAD,IAAgB,CAAE,CADI;EAEvCC,cAAc,EAAE,EAFuB;EAGvCC,aAAa,EAAE;AAHwB,CAAD,CAAnC;AAKP,OAAO,MAAMC,qBAAqB,gBAAGX,aAAa,CAAC;EAC/CY,iBAAiB,EAAE,CAACC,SAAD,EAAqBC,OAArB,KAA0C;IAAEC,OAAO,CAACC,GAAR,CAAa,GAAEH,SAAU,aAAYC,OAAQ,EAA7C;EAAgD;AADhE,CAAD,CAA3C;AAIP,eAAe,SAASG,WAAT,CAAqBC,KAArB,EAA+C;EAAA;;EAE1D,MAAM,CAACT,cAAD,EAAiBU,iBAAjB,IAAsChB,QAAQ,CAAC,EAAD,CAApD;EACA,MAAM,CAACO,aAAD,EAAgBU,gBAAhB,IAAoCjB,QAAQ,CAAC,UAAD,CAAlD;EAEA,MAAMI,eAAe,GAAGN,WAAW,CAC9BoB,QAAD,IAAsB;IAClB,IAAIA,QAAQ,KAAKZ,cAAjB,EAAiC;MAC7BU,iBAAiB,CAACE,QAAD,CAAjB;MACA;IACH;;IACDF,iBAAiB,CAAC,EAAD,CAAjB;IACA;EACH,CAR8B,EAQ5B,CAACV,cAAD,EAAiBU,iBAAjB,CAR4B,CAAnC;EAUA,MAAMP,iBAAiB,GAAGX,WAAW,CAAC,CAACY,SAAD,EAAqBC,OAArB,KAAgD;IAClFC,OAAO,CAACC,GAAR,CAAa,GAAEH,SAAU,UAASC,OAAQ,EAA1C;;IACA,IAAID,SAAJ,EAAe;MACXO,gBAAgB,CAAC,QAAD,CAAhB;IACH,CAFD,MAEO,IAAIN,OAAJ,EAAa;MAChBM,gBAAgB,CAAC,MAAD,CAAhB;IACH,CAFM,MAEA;MACHA,gBAAgB,CAAC,UAAD,CAAhB;IACH;EACJ,CAToC,EASlC,CAACA,gBAAD,CATkC,CAArC;EAWA,MAAME,aAAa,GAAGpB,OAAO,CACzB,OAAO;IACHK,eADG;IAEHE,cAFG;IAGHC;EAHG,CAAP,CADyB,EAMzB,CAACH,eAAD,EAAkBE,cAAlB,EAAkCC,aAAlC,CANyB,CAA7B;EAQA,MAAMa,eAAe,GAAGrB,OAAO,CAC3B,OAAO;IACHU,iBAAiB,EAAEA;EADhB,CAAP,CAD2B,EAGvB,CAAEA,iBAAF,CAHuB,CAA/B;;EAOA,MAAMY,YAAY,GAAIC,CAAD,IAAkB;IAEnC,MAAMC,WAAW,GAAG;MAChBlB,EAAE,EAAEiB,CAAC,CAACjB,EADU;MAEhBmB,IAAI,EAAEF,CAAC,CAACE,IAFQ;MAGhBC,UAAU,EAAEH,CAAC,CAACG,UAHE;MAIhBC,MAAM,EAAEJ,CAAC,CAACI,MAJM;MAKhBC,EAAE,EAAEL,CAAC,CAACK;IALU,CAApB;IAQA,oBACI,QAAC,MAAD,OAAYJ;IAAZ;MAAA;MAAA;MAAA;IAAA,QADJ;EAGH,CAbD;;EAeA,MAAM,CAACK,QAAD,EAAWC,WAAX,IAA0B7B,QAAQ,CAACe,KAAK,CAACa,QAAN,CAAeE,GAAf,CAAoBR,CAAD,IAAkBD,YAAY,CAACC,CAAD,CAAjD,CAAD,CAAxC;EAEA,oBACI;IAAK,SAAS,EAAC,iDAAf;IAAA,uBACI,QAAC,YAAD;MAAc,SAAS,EAAC,cAAxB;MAAA,uBACI;QAAK,SAAS,EAAC,wBAAf;QAAA,wBACI,QAAC,iBAAD;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAK,SAAS,EAAC,mBAAf;UAAA,uBACI,QAAC,aAAD,CAAe,QAAf;YAAwB,KAAK,EAAEH,aAA/B;YAAA,uBACI,QAAC,qBAAD,CAAuB,QAAvB;cAAgC,KAAK,EAAEC,eAAvC;cAAA,UACKQ;YADL;cAAA;cAAA;cAAA;YAAA;UADJ;YAAA;YAAA;YAAA;UAAA;QADJ;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAgBH;;GA1EuBd,W;;KAAAA,W"},"metadata":{},"sourceType":"module"}