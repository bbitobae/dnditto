{"ast":null,"code":"var _jsxFileName = \"/home/user/project/dnditto/src/EntityGroup/EntityGroup.tsx\",\n    _s = $RefreshSig$();\n\nimport Entity from \"../Entity/Entity\";\nimport React, { useCallback, useState } from 'react';\nimport { MDBContainer } from 'mdb-react-ui-kit';\nimport EntityGroupHeader from \"../EntityGroupHeader/EntityGroupHeader\";\nimport './EntityGroup.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/*export class EntityGroup extends React.Component<IEntityGroupProps, IEntityGroupState> {\n\n    constructor(props: any) {\n        super(props)\n        this.entities = props.entities.map((c: Character) => this.renderEntity(c));\n    }\n\n    entities;\n\n    onSelectedChange(id: string): void {\n        console.debug(\"deselect all but \" + id)\n\n    }\n\n    const [deselect, doDeselect] = useState\n\n    renderEntity(c: Character) {\n        const entityProps = {\n            id: c.id,\n            name: c.name,\n            initiative: c.initiative,\n            health: c.health,\n            ac: c.ac,\n            triggerDeselect: this.onSelectedChange,\n            deselectTrigger: 0\n        }\n        return (\n            <Entity {...entityProps} />\n        )\n    }\n\n    render() {\n        return(\n            <div className=\"d-flex justify-content-center\">\n                <MDBContainer className=\"entity-group\">\n                    <div className=\"entity-group-container\">\n                        <EntityGroupHeader />\n                        <div className=\"entity-group-list\">\n                            {this.entities}\n                        </div>\n                    </div>\n                </MDBContainer>\n            </div>\n        )\n    }\n}*/\nexport default function EntityGroup(props) {\n  _s();\n\n  const [selectedEntity, setSelectedEntity] = useState(\"\");\n  const selectionCallback = useCallback(entityId => {\n    console.log(`callback ${entityId}`);\n\n    if (entityId !== selectedEntity) {\n      setSelectedEntity(entityId);\n      updateEntities();\n    } else {\n      setSelectedEntity(\"\");\n      updateEntities();\n    }\n\n    return;\n  }, [selectedEntity, setSelectedEntity]);\n  const [deselect, doDeselect] = useState(false); // const onSelectedChange = (id: string): void => {\n  //     // console.debug(\"deselect all but \" + entities.filter(e => e.id === id).map(e => e.name))\n  //     console.debug(entities.filter((e: JSX.Entity) => e.props.id === id))\n  //     entities\n  //         .filter((e: any) => e.id !== id)\n  //         .forEach((e: any) => doDeselect(!deselect))\n  // }\n\n  const [selected, setSelected] = useState(false);\n\n  const something = () => {\n    console.debug(\"something\"); // doDeselect(!deselect);\n    // console.debug(deselect);\n    // entities.map(e => e.setSelected)\n    // setSelected(false)\n    // entities.forEach(e => e.props.setSelected(false))\n  };\n\n  const deselectAll = () => {// setEntities(entities.map((e: ReactElement) => e.props.setSelected(false)))\n  };\n\n  const renderEntity = c => {\n    const entityProps = {\n      id: c.id,\n      name: c.name,\n      initiative: c.initiative,\n      health: c.health,\n      ac: c.ac,\n      triggerDeselect: deselectAll,\n      deselectTrigger: deselect,\n      deselectAll: deselectAll,\n      defaultSelected: false,\n      selected: c.id === selectedEntity,\n      onClickCallback: selectionCallback\n    };\n    return /*#__PURE__*/_jsxDEV(Entity, { ...entityProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this);\n  };\n\n  const [entities, setEntities] = useState(props.entities.map(c => renderEntity(c)));\n\n  const updateEntities = () => {\n    console.debug(\"updating entities\");\n    setEntities(props.entities.map(c => renderEntity(c)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex justify-content-center\",\n    children: /*#__PURE__*/_jsxDEV(MDBContainer, {\n      className: \"entity-group\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"entity-group-container\",\n        children: [/*#__PURE__*/_jsxDEV(EntityGroupHeader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"entity-group-list\",\n          children: entities\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EntityGroup, \"U2aozhq3mFdw0HILeqeBBKs99XI=\");\n\n_c = EntityGroup;\n\nvar _c;\n\n$RefreshReg$(_c, \"EntityGroup\");","map":{"version":3,"names":["Entity","React","useCallback","useState","MDBContainer","EntityGroupHeader","EntityGroup","props","selectedEntity","setSelectedEntity","selectionCallback","entityId","console","log","updateEntities","deselect","doDeselect","selected","setSelected","something","debug","deselectAll","renderEntity","c","entityProps","id","name","initiative","health","ac","triggerDeselect","deselectTrigger","defaultSelected","onClickCallback","entities","setEntities","map"],"sources":["/home/user/project/dnditto/src/EntityGroup/EntityGroup.tsx"],"sourcesContent":["import Entity from \"../Entity/Entity\";\nimport React, {Component, ReactElement, useCallback, useRef, useState} from 'react';\nimport { MDBContainer } from 'mdb-react-ui-kit';\nimport Character from '../Models/Character';\nimport EntityGroupHeader from \"../EntityGroupHeader/EntityGroupHeader\";\nimport './EntityGroup.scss';\n\ninterface IEntityGroupProps {\n    entities: Array<Character>\n}\ninterface IEntityGroupState {\n    currentlySelectedEntity: boolean\n}\n\n/*export class EntityGroup extends React.Component<IEntityGroupProps, IEntityGroupState> {\n\n    constructor(props: any) {\n        super(props)\n        this.entities = props.entities.map((c: Character) => this.renderEntity(c));\n    }\n\n    entities;\n\n    onSelectedChange(id: string): void {\n        console.debug(\"deselect all but \" + id)\n\n    }\n\n    const [deselect, doDeselect] = useState\n\n    renderEntity(c: Character) {\n        const entityProps = {\n            id: c.id,\n            name: c.name,\n            initiative: c.initiative,\n            health: c.health,\n            ac: c.ac,\n            triggerDeselect: this.onSelectedChange,\n            deselectTrigger: 0\n        }\n        return (\n            <Entity {...entityProps} />\n        )\n    }\n\n    render() {\n        return(\n            <div className=\"d-flex justify-content-center\">\n                <MDBContainer className=\"entity-group\">\n                    <div className=\"entity-group-container\">\n                        <EntityGroupHeader />\n                        <div className=\"entity-group-list\">\n                            {this.entities}\n                        </div>\n                    </div>\n                </MDBContainer>\n            </div>\n        )\n    }\n}*/\n\n\nexport default function EntityGroup(props: IEntityGroupProps) {\n\n    const [selectedEntity, setSelectedEntity] = useState(\"\")\n    const selectionCallback = useCallback(\n        (entityId: string) => {\n            console.log(`callback ${entityId}`)\n            if (entityId !== selectedEntity) {\n                setSelectedEntity(entityId)\n                updateEntities()\n            }\n            else {\n                setSelectedEntity(\"\")\n                updateEntities()\n            }\n            return\n        }, [selectedEntity, setSelectedEntity]\n    )\n\n\n    const [deselect, doDeselect] = useState(false)\n    // const onSelectedChange = (id: string): void => {\n    //     // console.debug(\"deselect all but \" + entities.filter(e => e.id === id).map(e => e.name))\n    //     console.debug(entities.filter((e: JSX.Entity) => e.props.id === id))\n    //     entities\n    //         .filter((e: any) => e.id !== id)\n    //         .forEach((e: any) => doDeselect(!deselect))\n    // }\n\n    const [selected, setSelected] = useState(false)\n\n    const something = () => {\n        console.debug(\"something\")\n        // doDeselect(!deselect);\n        // console.debug(deselect);\n        // entities.map(e => e.setSelected)\n        // setSelected(false)\n        // entities.forEach(e => e.props.setSelected(false))\n    }\n\n    const deselectAll = () => {\n        // setEntities(entities.map((e: ReactElement) => e.props.setSelected(false)))\n    }\n\n    const renderEntity = (c: Character) => {\n\n        const entityProps = {\n            id: c.id,\n            name: c.name,\n            initiative: c.initiative,\n            health: c.health,\n            ac: c.ac,\n            triggerDeselect: deselectAll,\n            deselectTrigger: deselect,\n            deselectAll: deselectAll,\n            defaultSelected: false,\n            selected: c.id === selectedEntity,\n            onClickCallback: selectionCallback\n        }\n\n        return (\n            <Entity {...entityProps} />\n        )\n    }\n\n    const [entities, setEntities] = useState(props.entities.map((c: Character) => renderEntity(c)))\n\n    const updateEntities = () => {\n        console.debug(\"updating entities\")\n        setEntities(props.entities.map((c: Character) => renderEntity(c)))\n    }\n\n    return(\n        <div className=\"d-flex justify-content-center\">\n            <MDBContainer className=\"entity-group\">\n                <div className=\"entity-group-container\">\n                    <EntityGroupHeader />\n                    <div className=\"entity-group-list\">\n                        {entities}\n                    </div>\n                </div>\n            </MDBContainer>\n        </div>\n    )\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}