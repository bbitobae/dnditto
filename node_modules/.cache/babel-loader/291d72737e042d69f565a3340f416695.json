{"ast":null,"code":"var _jsxFileName = \"/home/user/project/dnditto/src/EntityGroup/EntityGroup.tsx\",\n    _s = $RefreshSig$();\n\nimport Entity from \"../Entity/Entity\";\nimport React, { createContext, useCallback, useMemo, useState } from 'react';\nimport { MDBContainer } from 'mdb-react-ui-kit';\nimport EntityGroupHeader from \"../EntityGroupHeader/EntityGroupHeader\";\nimport './EntityGroup.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EntityContext = /*#__PURE__*/createContext({\n  selectionToggle: id => {},\n  selectedEntity: \"\"\n});\nexport default function EntityGroup(props) {\n  _s();\n\n  const [selectedEntity, setSelectedEntity] = useState(\"\");\n  const selectionToggle = useCallback(entityId => {\n    console.log(`${entityId} | ${selectedEntity}`);\n\n    if (entityId !== selectedEntity) {\n      setSelectedEntity(entityId);\n      console.log(selectedEntity);\n      updateEntities();\n    } else {\n      setSelectedEntity(\"\");\n      updateEntities();\n    }\n\n    return;\n  }, [selectedEntity, setSelectedEntity]);\n  const selectionContext = useMemo(() => ({\n    selectionToggle,\n    selectedEntity\n  }), [selectionToggle, selectedEntity]);\n\n  const renderEntity = c => {\n    const entityProps = {\n      id: c.id,\n      name: c.name,\n      initiative: c.initiative,\n      health: c.health,\n      ac: c.ac\n    };\n    return /*#__PURE__*/_jsxDEV(Entity, { ...entityProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  };\n\n  const [entities, setEntities] = useState(props.entities.map(c => renderEntity(c)));\n\n  const updateEntities = () => {\n    console.debug(\"updating entities\");\n    setEntities(props.entities.map(c => renderEntity(c)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex justify-content-center\",\n    children: /*#__PURE__*/_jsxDEV(MDBContainer, {\n      className: \"entity-group\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"entity-group-container\",\n        children: [/*#__PURE__*/_jsxDEV(EntityGroupHeader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"entity-group-list\",\n          children: /*#__PURE__*/_jsxDEV(EntityContext.Provider, {\n            value: selectionContext,\n            children: entities\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EntityGroup, \"WHxGUouWHKl7yTOaNmf5ijT5yMk=\");\n\n_c = EntityGroup;\n\nvar _c;\n\n$RefreshReg$(_c, \"EntityGroup\");","map":{"version":3,"names":["Entity","React","createContext","useCallback","useMemo","useState","MDBContainer","EntityGroupHeader","EntityContext","selectionToggle","id","selectedEntity","EntityGroup","props","setSelectedEntity","entityId","console","log","updateEntities","selectionContext","renderEntity","c","entityProps","name","initiative","health","ac","entities","setEntities","map","debug"],"sources":["/home/user/project/dnditto/src/EntityGroup/EntityGroup.tsx"],"sourcesContent":["import Entity from \"../Entity/Entity\";\nimport React, {Component, createContext, ReactElement, useCallback, useMemo, useRef, useState} from 'react';\nimport { MDBContainer } from 'mdb-react-ui-kit';\nimport Character from '../Models/Character';\nimport EntityGroupHeader from \"../EntityGroupHeader/EntityGroupHeader\";\nimport './EntityGroup.scss';\n\ninterface IEntityGroupProps {\n    entities: Array<Character>\n}\n\nexport const EntityContext = createContext({\n    selectionToggle: (id: string) => {},\n    selectedEntity: \"\"\n});\n\nexport default function EntityGroup(props: IEntityGroupProps) {\n\n    const [selectedEntity, setSelectedEntity] = useState(\"\")\n    const selectionToggle = useCallback(\n        (entityId: string) => {\n            console.log(`${entityId} | ${selectedEntity}`)\n            if (entityId !== selectedEntity) {\n                setSelectedEntity(entityId)\n                console.log(selectedEntity)\n                updateEntities()\n            }\n            else {\n                setSelectedEntity(\"\")\n                updateEntities()\n            }\n            return\n        }, [selectedEntity, setSelectedEntity]\n    )\n    const selectionContext = useMemo(\n        () => ({\n            selectionToggle,\n            selectedEntity\n        }),\n        [selectionToggle, selectedEntity]\n    )\n\n    const renderEntity = (c: Character) => {\n\n        const entityProps = {\n            id: c.id,\n            name: c.name,\n            initiative: c.initiative,\n            health: c.health,\n            ac: c.ac\n        }\n\n        return (\n            <Entity {...entityProps} />\n        )\n    }\n\n    const [entities, setEntities] = useState(props.entities.map((c: Character) => renderEntity(c)))\n\n    const updateEntities = () => {\n        console.debug(\"updating entities\")\n        setEntities(props.entities.map((c: Character) => renderEntity(c)))\n    }\n\n    return(\n        <div className=\"d-flex justify-content-center\">\n            <MDBContainer className=\"entity-group\">\n                <div className=\"entity-group-container\">\n                    <EntityGroupHeader />\n                    <div className=\"entity-group-list\">\n                        <EntityContext.Provider value={selectionContext}>\n                            {entities}\n                        </EntityContext.Provider>\n                    </div>\n                </div>\n            </MDBContainer>\n        </div>\n    )\n}\n"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,kBAAnB;AACA,OAAOC,KAAP,IAA0BC,aAA1B,EAAuDC,WAAvD,EAAoEC,OAApE,EAAqFC,QAArF,QAAoG,OAApG;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,OAAOC,iBAAP,MAA8B,wCAA9B;AACA,OAAO,oBAAP;;AAMA,OAAO,MAAMC,aAAa,gBAAGN,aAAa,CAAC;EACvCO,eAAe,EAAGC,EAAD,IAAgB,CAAE,CADI;EAEvCC,cAAc,EAAE;AAFuB,CAAD,CAAnC;AAKP,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA+C;EAAA;;EAE1D,MAAM,CAACF,cAAD,EAAiBG,iBAAjB,IAAsCT,QAAQ,CAAC,EAAD,CAApD;EACA,MAAMI,eAAe,GAAGN,WAAW,CAC9BY,QAAD,IAAsB;IAClBC,OAAO,CAACC,GAAR,CAAa,GAAEF,QAAS,MAAKJ,cAAe,EAA5C;;IACA,IAAII,QAAQ,KAAKJ,cAAjB,EAAiC;MAC7BG,iBAAiB,CAACC,QAAD,CAAjB;MACAC,OAAO,CAACC,GAAR,CAAYN,cAAZ;MACAO,cAAc;IACjB,CAJD,MAKK;MACDJ,iBAAiB,CAAC,EAAD,CAAjB;MACAI,cAAc;IACjB;;IACD;EACH,CAb8B,EAa5B,CAACP,cAAD,EAAiBG,iBAAjB,CAb4B,CAAnC;EAeA,MAAMK,gBAAgB,GAAGf,OAAO,CAC5B,OAAO;IACHK,eADG;IAEHE;EAFG,CAAP,CAD4B,EAK5B,CAACF,eAAD,EAAkBE,cAAlB,CAL4B,CAAhC;;EAQA,MAAMS,YAAY,GAAIC,CAAD,IAAkB;IAEnC,MAAMC,WAAW,GAAG;MAChBZ,EAAE,EAAEW,CAAC,CAACX,EADU;MAEhBa,IAAI,EAAEF,CAAC,CAACE,IAFQ;MAGhBC,UAAU,EAAEH,CAAC,CAACG,UAHE;MAIhBC,MAAM,EAAEJ,CAAC,CAACI,MAJM;MAKhBC,EAAE,EAAEL,CAAC,CAACK;IALU,CAApB;IAQA,oBACI,QAAC,MAAD,OAAYJ;IAAZ;MAAA;MAAA;MAAA;IAAA,QADJ;EAGH,CAbD;;EAeA,MAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAACQ,KAAK,CAACc,QAAN,CAAeE,GAAf,CAAoBR,CAAD,IAAkBD,YAAY,CAACC,CAAD,CAAjD,CAAD,CAAxC;;EAEA,MAAMH,cAAc,GAAG,MAAM;IACzBF,OAAO,CAACc,KAAR,CAAc,mBAAd;IACAF,WAAW,CAACf,KAAK,CAACc,QAAN,CAAeE,GAAf,CAAoBR,CAAD,IAAkBD,YAAY,CAACC,CAAD,CAAjD,CAAD,CAAX;EACH,CAHD;;EAKA,oBACI;IAAK,SAAS,EAAC,+BAAf;IAAA,uBACI,QAAC,YAAD;MAAc,SAAS,EAAC,cAAxB;MAAA,uBACI;QAAK,SAAS,EAAC,wBAAf;QAAA,wBACI,QAAC,iBAAD;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAK,SAAS,EAAC,mBAAf;UAAA,uBACI,QAAC,aAAD,CAAe,QAAf;YAAwB,KAAK,EAAEF,gBAA/B;YAAA,UACKQ;UADL;YAAA;YAAA;YAAA;UAAA;QADJ;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAcH;;GA9DuBf,W;;KAAAA,W"},"metadata":{},"sourceType":"module"}